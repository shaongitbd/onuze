{
    "swagger": "2.0",
    "info": {
      "title": "Reddit Clone API",
      "description": "API for Reddit Clone",
      "termsOfService": "https://www.example.com/terms/",
      "contact": {
        "email": "contact@example.com"
      },
      "license": {
        "name": "MIT License"
      },
      "version": "v1"
    },
    "host": "localhost:8000",
    "schemes": [
      "http"
    ],
    "basePath": "/api/v1",
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "securityDefinitions": {
      "Basic": {
        "type": "basic"
      }
    },
    "security": [
      {
        "Basic": []
      }
    ],
    "paths": {
      "/auth/jwt/create/": {
        "post": {
          "operationId": "auth_jwt_create_create",
          "description": "Takes a set of user credentials and returns an access and refresh JSON web\ntoken pair to prove the authentication of those credentials.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/TokenObtainPair"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/TokenObtainPair"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "parameters": []
      },
      "/auth/jwt/refresh/": {
        "post": {
          "operationId": "auth_jwt_refresh_create",
          "description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/TokenRefresh"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/TokenRefresh"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "parameters": []
      },
      "/auth/jwt/verify/": {
        "post": {
          "operationId": "auth_jwt_verify_create",
          "description": "Takes a token and indicates if it is valid.  This view provides no\ninformation about a token's fitness for a particular use.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/TokenVerify"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/TokenVerify"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "parameters": []
      },
      "/auth/logout/": {
        "post": {
          "operationId": "auth_logout_create",
          "description": "Logout view to clear JWT cookies and revoke refresh token.",
          "parameters": [],
          "responses": {
            "201": {
              "description": ""
            }
          },
          "tags": [
            "auth"
          ]
        },
        "parameters": []
      },
      "/auth/token/": {
        "post": {
          "operationId": "auth_token_create",
          "description": "Takes a set of user credentials and returns access and refresh tokens stored in HttpOnly cookies.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/TokenObtainPair"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/TokenObtainPair"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "parameters": []
      },
      "/auth/token/refresh/": {
        "post": {
          "operationId": "auth_token_refresh_create",
          "description": "Refresh JWT tokens using the refresh token from the cookie.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/TokenRefresh"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/TokenRefresh"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "parameters": []
      },
      "/auth/users/": {
        "get": {
          "operationId": "auth_users_list",
          "description": "",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/User"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "post": {
          "operationId": "auth_users_create",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserCreatePasswordRetype"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserCreatePasswordRetype"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "parameters": []
      },
      "/auth/users/activation/": {
        "post": {
          "operationId": "auth_users_activation",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Activation"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Activation"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "parameters": []
      },
      "/auth/users/me/": {
        "get": {
          "operationId": "auth_users_me_read",
          "description": "",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/User"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "put": {
          "operationId": "auth_users_me_update",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "patch": {
          "operationId": "auth_users_me_partial_update",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "delete": {
          "operationId": "auth_users_me_delete",
          "description": "",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "auth"
          ]
        },
        "parameters": []
      },
      "/auth/users/resend_activation/": {
        "post": {
          "operationId": "auth_users_resend_activation",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SendEmailReset"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/SendEmailReset"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "parameters": []
      },
      "/auth/users/reset_email/": {
        "post": {
          "operationId": "auth_users_reset_username",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SendEmailReset"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/SendEmailReset"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "parameters": []
      },
      "/auth/users/reset_email_confirm/": {
        "post": {
          "operationId": "auth_users_reset_username_confirm",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UsernameResetConfirm"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UsernameResetConfirm"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "parameters": []
      },
      "/auth/users/reset_password/": {
        "post": {
          "operationId": "auth_users_reset_password",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SendEmailReset"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/SendEmailReset"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "parameters": []
      },
      "/auth/users/reset_password_confirm/": {
        "post": {
          "operationId": "auth_users_reset_password_confirm",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PasswordResetConfirmRetype"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/PasswordResetConfirmRetype"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "parameters": []
      },
      "/auth/users/set_email/": {
        "post": {
          "operationId": "auth_users_set_username",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SetUsername"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/SetUsername"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "parameters": []
      },
      "/auth/users/set_password/": {
        "post": {
          "operationId": "auth_users_set_password",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SetPasswordRetype"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/SetPasswordRetype"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "parameters": []
      },
      "/auth/users/{id}/": {
        "get": {
          "operationId": "auth_users_read",
          "description": "",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "put": {
          "operationId": "auth_users_update",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "patch": {
          "operationId": "auth_users_partial_update",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "tags": [
            "auth"
          ]
        },
        "delete": {
          "operationId": "auth_users_delete",
          "description": "",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "auth"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A UUID string identifying this User.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ]
      },
      "/comments/": {
        "get": {
          "operationId": "comments_list",
          "description": "API endpoint for comments.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Comment"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "comments"
          ]
        },
        "post": {
          "operationId": "comments_create",
          "description": "API endpoint for comments.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Comment"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Comment"
              }
            }
          },
          "tags": [
            "comments"
          ]
        },
        "parameters": []
      },
      "/comments/{id}/": {
        "get": {
          "operationId": "comments_read",
          "description": "API endpoint for comments.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Comment"
              }
            }
          },
          "tags": [
            "comments"
          ]
        },
        "put": {
          "operationId": "comments_update",
          "description": "API endpoint for comments.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Comment"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Comment"
              }
            }
          },
          "tags": [
            "comments"
          ]
        },
        "patch": {
          "operationId": "comments_partial_update",
          "description": "API endpoint for comments.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Comment"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Comment"
              }
            }
          },
          "tags": [
            "comments"
          ]
        },
        "delete": {
          "operationId": "comments_delete",
          "description": "API endpoint for comments.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "comments"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/comments/{id}/remove/": {
        "post": {
          "operationId": "comments_remove",
          "description": "API endpoint for comments.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Comment"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Comment"
              }
            }
          },
          "tags": [
            "comments"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/comments/{id}/restore/": {
        "post": {
          "operationId": "comments_restore",
          "description": "API endpoint for comments.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Comment"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Comment"
              }
            }
          },
          "tags": [
            "comments"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/communities/": {
        "get": {
          "operationId": "communities_list",
          "description": "",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Community"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "post": {
          "operationId": "communities_create",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Community"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Community"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": []
      },
      "/communities/flairs/": {
        "get": {
          "operationId": "communities_flairs_list",
          "description": "API endpoint for community flairs.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Flair"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "post": {
          "operationId": "communities_flairs_create",
          "description": "API endpoint for community flairs.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Flair"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Flair"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": []
      },
      "/communities/flairs/{id}/": {
        "get": {
          "operationId": "communities_flairs_read",
          "description": "API endpoint for community flairs.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Flair"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "put": {
          "operationId": "communities_flairs_update",
          "description": "API endpoint for community flairs.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Flair"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Flair"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "patch": {
          "operationId": "communities_flairs_partial_update",
          "description": "API endpoint for community flairs.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Flair"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Flair"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "delete": {
          "operationId": "communities_flairs_delete",
          "description": "API endpoint for community flairs.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/communities/rules/": {
        "get": {
          "operationId": "communities_rules_list",
          "description": "API endpoint for community rules.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CommunityRule"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "post": {
          "operationId": "communities_rules_create",
          "description": "API endpoint for community rules.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CommunityRule"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CommunityRule"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": []
      },
      "/communities/rules/{id}/": {
        "get": {
          "operationId": "communities_rules_read",
          "description": "API endpoint for community rules.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CommunityRule"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "put": {
          "operationId": "communities_rules_update",
          "description": "API endpoint for community rules.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CommunityRule"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CommunityRule"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "patch": {
          "operationId": "communities_rules_partial_update",
          "description": "API endpoint for community rules.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CommunityRule"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CommunityRule"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "delete": {
          "operationId": "communities_rules_delete",
          "description": "API endpoint for community rules.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/communities/{community_id}/members/": {
        "get": {
          "operationId": "communities_members_list",
          "description": "API endpoint for community members.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CommunityMember"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "post": {
          "operationId": "communities_members_create",
          "description": "API endpoint for community members.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CommunityMember"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CommunityMember"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": [
          {
            "name": "community_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/communities/{community_id}/members/{id}/": {
        "get": {
          "operationId": "communities_members_read",
          "description": "API endpoint for community members.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CommunityMember"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "put": {
          "operationId": "communities_members_update",
          "description": "API endpoint for community members.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CommunityMember"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CommunityMember"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "patch": {
          "operationId": "communities_members_partial_update",
          "description": "API endpoint for community members.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CommunityMember"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CommunityMember"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "delete": {
          "operationId": "communities_members_delete",
          "description": "API endpoint for community members.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": [
          {
            "name": "community_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/communities/{community_id}/members/{id}/approve/": {
        "post": {
          "operationId": "communities_members_approve",
          "description": "API endpoint for community members.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CommunityMember"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CommunityMember"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": [
          {
            "name": "community_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/communities/{community_id}/members/{id}/reject/": {
        "post": {
          "operationId": "communities_members_reject",
          "description": "API endpoint for community members.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CommunityMember"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CommunityMember"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": [
          {
            "name": "community_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/communities/{community_id}/moderators/": {
        "get": {
          "operationId": "communities_moderators_list",
          "description": "API endpoint for community moderators.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CommunityModerator"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "post": {
          "operationId": "communities_moderators_create",
          "description": "API endpoint for community moderators.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CommunityModerator"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CommunityModerator"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": [
          {
            "name": "community_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/communities/{community_id}/moderators/transfer_ownership/": {
        "post": {
          "operationId": "communities_moderators_transfer_ownership",
          "description": "API endpoint for community moderators.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CommunityModerator"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CommunityModerator"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": [
          {
            "name": "community_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/communities/{community_id}/moderators/{id}/": {
        "get": {
          "operationId": "communities_moderators_read",
          "description": "API endpoint for community moderators.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CommunityModerator"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "put": {
          "operationId": "communities_moderators_update",
          "description": "API endpoint for community moderators.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CommunityModerator"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CommunityModerator"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "patch": {
          "operationId": "communities_moderators_partial_update",
          "description": "API endpoint for community moderators.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CommunityModerator"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/CommunityModerator"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "delete": {
          "operationId": "communities_moderators_delete",
          "description": "API endpoint for community moderators.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": [
          {
            "name": "community_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/communities/{id}/": {
        "get": {
          "operationId": "communities_read",
          "description": "",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Community"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "put": {
          "operationId": "communities_update",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Community"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Community"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "patch": {
          "operationId": "communities_partial_update",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Community"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Community"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "delete": {
          "operationId": "communities_delete",
          "description": "",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A UUID string identifying this Community.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ]
      },
      "/communities/{id}/join/": {
        "post": {
          "operationId": "communities_join",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Community"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Community"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A UUID string identifying this Community.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ]
      },
      "/communities/{id}/leave/": {
        "post": {
          "operationId": "communities_leave",
          "description": "",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Community"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Community"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A UUID string identifying this Community.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ]
      },
      "/communities/{id}/members/": {
        "get": {
          "operationId": "communities_members",
          "description": "",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Community"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A UUID string identifying this Community.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ]
      },
      "/communities/{id}/moderators/": {
        "get": {
          "operationId": "communities_moderators",
          "description": "",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Community"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A UUID string identifying this Community.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ]
      },
      "/communities/{id}/rules/": {
        "get": {
          "operationId": "communities_rules",
          "description": "",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Community"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A UUID string identifying this Community.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ]
      },
      "/communities/{id}/settings/": {
        "get": {
          "operationId": "communities_list_settings",
          "description": "",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Community"
              }
            }
          },
          "tags": [
            "communities"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A UUID string identifying this Community.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ]
      },
      "/messages/": {
        "get": {
          "operationId": "messages_list",
          "description": "API endpoint for private messages.\nHandles listing inbox/sent, retrieving, sending, and deleting messages.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/PrivateMessage"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "messages"
          ]
        },
        "post": {
          "operationId": "messages_create",
          "description": "API endpoint for private messages.\nHandles listing inbox/sent, retrieving, sending, and deleting messages.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PrivateMessage"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/PrivateMessage"
              }
            }
          },
          "tags": [
            "messages"
          ]
        },
        "parameters": []
      },
      "/messages/conversations/{user_id}/": {
        "get": {
          "operationId": "messages_conversations_read",
          "description": "API endpoint for viewing a conversation between the current user and another user.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/PrivateMessage"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "messages"
          ]
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/messages/unread-count/": {
        "get": {
          "operationId": "messages_unread-count_list",
          "description": "API endpoint for getting the count of unread private messages.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": ""
            }
          },
          "tags": [
            "messages"
          ]
        },
        "parameters": []
      },
      "/messages/{id}/": {
        "get": {
          "operationId": "messages_read",
          "description": "Mark message as read when retrieved.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/PrivateMessage"
              }
            }
          },
          "tags": [
            "messages"
          ]
        },
        "put": {
          "operationId": "messages_update",
          "description": "API endpoint for private messages.\nHandles listing inbox/sent, retrieving, sending, and deleting messages.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PrivateMessage"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/PrivateMessage"
              }
            }
          },
          "tags": [
            "messages"
          ]
        },
        "patch": {
          "operationId": "messages_partial_update",
          "description": "API endpoint for private messages.\nHandles listing inbox/sent, retrieving, sending, and deleting messages.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PrivateMessage"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/PrivateMessage"
              }
            }
          },
          "tags": [
            "messages"
          ]
        },
        "delete": {
          "operationId": "messages_delete",
          "description": "API endpoint for private messages.\nHandles listing inbox/sent, retrieving, sending, and deleting messages.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "messages"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/moderation/ban-appeals/": {
        "get": {
          "operationId": "moderation_ban-appeals_list",
          "description": "API endpoint for handling ban appeals.\nUsers can create appeals for their bans.\nModerators/Admins can view and manage appeals.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/BanAppeal"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "moderation"
          ]
        },
        "post": {
          "operationId": "moderation_ban-appeals_create",
          "description": "API endpoint for handling ban appeals.\nUsers can create appeals for their bans.\nModerators/Admins can view and manage appeals.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/BanAppeal"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/BanAppeal"
              }
            }
          },
          "tags": [
            "moderation"
          ]
        },
        "parameters": []
      },
      "/moderation/ban-appeals/{id}/": {
        "get": {
          "operationId": "moderation_ban-appeals_read",
          "description": "API endpoint for handling ban appeals.\nUsers can create appeals for their bans.\nModerators/Admins can view and manage appeals.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/BanAppeal"
              }
            }
          },
          "tags": [
            "moderation"
          ]
        },
        "put": {
          "operationId": "moderation_ban-appeals_update",
          "description": "API endpoint for handling ban appeals.\nUsers can create appeals for their bans.\nModerators/Admins can view and manage appeals.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/BanAppeal"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/BanAppeal"
              }
            }
          },
          "tags": [
            "moderation"
          ]
        },
        "patch": {
          "operationId": "moderation_ban-appeals_partial_update",
          "description": "API endpoint for handling ban appeals.\nUsers can create appeals for their bans.\nModerators/Admins can view and manage appeals.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/BanAppeal"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/BanAppeal"
              }
            }
          },
          "tags": [
            "moderation"
          ]
        },
        "delete": {
          "operationId": "moderation_ban-appeals_delete",
          "description": "API endpoint for handling ban appeals.\nUsers can create appeals for their bans.\nModerators/Admins can view and manage appeals.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "moderation"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/moderation/ban-appeals/{id}/approve/": {
        "post": {
          "operationId": "moderation_ban-appeals_approve",
          "description": "API endpoint for handling ban appeals.\nUsers can create appeals for their bans.\nModerators/Admins can view and manage appeals.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/BanAppeal"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/BanAppeal"
              }
            }
          },
          "tags": [
            "moderation"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/moderation/ban-appeals/{id}/reject/": {
        "post": {
          "operationId": "moderation_ban-appeals_reject",
          "description": "API endpoint for handling ban appeals.\nUsers can create appeals for their bans.\nModerators/Admins can view and manage appeals.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/BanAppeal"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/BanAppeal"
              }
            }
          },
          "tags": [
            "moderation"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/moderation/communities/{community_id}/reports/": {
        "get": {
          "operationId": "moderation_communities_reports_list",
          "description": "API endpoint for listing reports specific to a community.\nRequires moderator or admin permissions.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Report"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "moderation"
          ]
        },
        "parameters": [
          {
            "name": "community_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/moderation/reports/": {
        "get": {
          "operationId": "moderation_reports_list",
          "description": "API endpoint for handling reports.\nUsers can create reports.\nModerators/Admins can view, resolve, or reject reports.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Report"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "moderation"
          ]
        },
        "post": {
          "operationId": "moderation_reports_create",
          "description": "API endpoint for handling reports.\nUsers can create reports.\nModerators/Admins can view, resolve, or reject reports.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Report"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Report"
              }
            }
          },
          "tags": [
            "moderation"
          ]
        },
        "parameters": []
      },
      "/moderation/reports/{id}/": {
        "get": {
          "operationId": "moderation_reports_read",
          "description": "API endpoint for handling reports.\nUsers can create reports.\nModerators/Admins can view, resolve, or reject reports.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Report"
              }
            }
          },
          "tags": [
            "moderation"
          ]
        },
        "put": {
          "operationId": "moderation_reports_update",
          "description": "API endpoint for handling reports.\nUsers can create reports.\nModerators/Admins can view, resolve, or reject reports.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Report"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Report"
              }
            }
          },
          "tags": [
            "moderation"
          ]
        },
        "patch": {
          "operationId": "moderation_reports_partial_update",
          "description": "API endpoint for handling reports.\nUsers can create reports.\nModerators/Admins can view, resolve, or reject reports.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Report"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Report"
              }
            }
          },
          "tags": [
            "moderation"
          ]
        },
        "delete": {
          "operationId": "moderation_reports_delete",
          "description": "API endpoint for handling reports.\nUsers can create reports.\nModerators/Admins can view, resolve, or reject reports.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "moderation"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/moderation/reports/{id}/reject/": {
        "post": {
          "operationId": "moderation_reports_reject",
          "description": "API endpoint for handling reports.\nUsers can create reports.\nModerators/Admins can view, resolve, or reject reports.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Report"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Report"
              }
            }
          },
          "tags": [
            "moderation"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/moderation/reports/{id}/resolve/": {
        "post": {
          "operationId": "moderation_reports_resolve",
          "description": "API endpoint for handling reports.\nUsers can create reports.\nModerators/Admins can view, resolve, or reject reports.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Report"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Report"
              }
            }
          },
          "tags": [
            "moderation"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/notifications/": {
        "get": {
          "operationId": "notifications_list",
          "description": "API endpoint for user notifications.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Notification"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "notifications"
          ]
        },
        "post": {
          "operationId": "notifications_create",
          "description": "API endpoint for user notifications.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Notification"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Notification"
              }
            }
          },
          "tags": [
            "notifications"
          ]
        },
        "parameters": []
      },
      "/notifications/count/": {
        "get": {
          "operationId": "notifications_count_list",
          "description": "API endpoint for getting notification counts.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/NotificationCount"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "notifications"
          ]
        },
        "parameters": []
      },
      "/notifications/mark-all-read/": {
        "post": {
          "operationId": "notifications_mark-all-read_create",
          "description": "API endpoint for marking all notifications as read.",
          "parameters": [],
          "responses": {
            "201": {
              "description": ""
            }
          },
          "tags": [
            "notifications"
          ]
        },
        "parameters": []
      },
      "/notifications/{id}/": {
        "get": {
          "operationId": "notifications_read",
          "description": "API endpoint for user notifications.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Notification"
              }
            }
          },
          "tags": [
            "notifications"
          ]
        },
        "put": {
          "operationId": "notifications_update",
          "description": "API endpoint for user notifications.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Notification"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Notification"
              }
            }
          },
          "tags": [
            "notifications"
          ]
        },
        "patch": {
          "operationId": "notifications_partial_update",
          "description": "API endpoint for user notifications.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Notification"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Notification"
              }
            }
          },
          "tags": [
            "notifications"
          ]
        },
        "delete": {
          "operationId": "notifications_delete",
          "description": "API endpoint for user notifications.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "notifications"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/notifications/{id}/mark_read/": {
        "post": {
          "operationId": "notifications_mark_read",
          "description": "API endpoint for user notifications.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Notification"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Notification"
              }
            }
          },
          "tags": [
            "notifications"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/notifications/{id}/mark_unread/": {
        "post": {
          "operationId": "notifications_mark_unread",
          "description": "API endpoint for user notifications.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Notification"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Notification"
              }
            }
          },
          "tags": [
            "notifications"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/posts/": {
        "get": {
          "operationId": "posts_list",
          "description": "API endpoint for posts.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Post"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "posts"
          ]
        },
        "post": {
          "operationId": "posts_create",
          "description": "API endpoint for posts.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Post"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Post"
              }
            }
          },
          "tags": [
            "posts"
          ]
        },
        "parameters": []
      },
      "/posts/media/": {
        "get": {
          "operationId": "posts_media_list",
          "description": "API endpoint for post media.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/PostMedia"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "posts"
          ]
        },
        "post": {
          "operationId": "posts_media_create",
          "description": "API endpoint for post media.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PostMedia"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/PostMedia"
              }
            }
          },
          "tags": [
            "posts"
          ]
        },
        "parameters": []
      },
      "/posts/media/{id}/": {
        "get": {
          "operationId": "posts_media_read",
          "description": "API endpoint for post media.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/PostMedia"
              }
            }
          },
          "tags": [
            "posts"
          ]
        },
        "put": {
          "operationId": "posts_media_update",
          "description": "API endpoint for post media.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PostMedia"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/PostMedia"
              }
            }
          },
          "tags": [
            "posts"
          ]
        },
        "patch": {
          "operationId": "posts_media_partial_update",
          "description": "API endpoint for post media.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PostMedia"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/PostMedia"
              }
            }
          },
          "tags": [
            "posts"
          ]
        },
        "delete": {
          "operationId": "posts_media_delete",
          "description": "API endpoint for post media.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "posts"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/posts/{id}/": {
        "get": {
          "operationId": "posts_read",
          "description": "API endpoint for posts.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Post"
              }
            }
          },
          "tags": [
            "posts"
          ]
        },
        "put": {
          "operationId": "posts_update",
          "description": "API endpoint for posts.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Post"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Post"
              }
            }
          },
          "tags": [
            "posts"
          ]
        },
        "patch": {
          "operationId": "posts_partial_update",
          "description": "API endpoint for posts.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Post"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Post"
              }
            }
          },
          "tags": [
            "posts"
          ]
        },
        "delete": {
          "operationId": "posts_delete",
          "description": "API endpoint for posts.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "posts"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/posts/{id}/lock/": {
        "post": {
          "operationId": "posts_lock",
          "description": "API endpoint for posts.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Post"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Post"
              }
            }
          },
          "tags": [
            "posts"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/posts/{id}/pin/": {
        "post": {
          "operationId": "posts_pin",
          "description": "API endpoint for posts.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Post"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Post"
              }
            }
          },
          "tags": [
            "posts"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/posts/{id}/unlock/": {
        "post": {
          "operationId": "posts_unlock",
          "description": "API endpoint for posts.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Post"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Post"
              }
            }
          },
          "tags": [
            "posts"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/posts/{id}/unpin/": {
        "post": {
          "operationId": "posts_unpin",
          "description": "API endpoint for posts.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Post"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Post"
              }
            }
          },
          "tags": [
            "posts"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/search/": {
        "get": {
          "operationId": "search_list",
          "description": "API endpoint for searching across posts, comments, communities, and users.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SearchResult"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "search"
          ]
        },
        "parameters": []
      },
      "/search/history/": {
        "get": {
          "operationId": "search_history_list",
          "description": "API endpoint for viewing user's search history.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SearchHistory"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "search"
          ]
        },
        "parameters": []
      },
      "/security/logout/": {
        "post": {
          "operationId": "security_logout_create",
          "description": "Logout view to clear JWT cookies and revoke refresh token.",
          "parameters": [],
          "responses": {
            "201": {
              "description": ""
            }
          },
          "tags": [
            "security"
          ]
        },
        "parameters": []
      },
      "/security/token/": {
        "post": {
          "operationId": "security_token_create",
          "description": "Takes a set of user credentials and returns access and refresh tokens stored in HttpOnly cookies.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/TokenObtainPair"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/TokenObtainPair"
              }
            }
          },
          "tags": [
            "security"
          ]
        },
        "parameters": []
      },
      "/security/token/refresh/": {
        "post": {
          "operationId": "security_token_refresh_create",
          "description": "Refresh JWT tokens using the refresh token from the cookie.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/TokenRefresh"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/TokenRefresh"
              }
            }
          },
          "tags": [
            "security"
          ]
        },
        "parameters": []
      },
      "/uploads/images/": {
        "post": {
          "operationId": "uploads_images_create",
          "summary": "Upload image",
          "description": "Upload an image to Backblaze B2 storage",
          "parameters": [
            {
              "name": "image",
              "in": "formData",
              "description": "Image file to upload",
              "required": true,
              "type": "file"
            },
            {
              "name": "type",
              "in": "formData",
              "description": "Image type (post, community, or profile)",
              "required": false,
              "type": "string",
              "enum": [
                "post",
                "community",
                "profile"
              ],
              "default": "post"
            }
          ],
          "responses": {
            "201": {
              "description": "Image uploaded successfully",
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "description": "URL to the uploaded image",
                    "type": "string"
                  },
                  "success": {
                    "description": "Indicates success",
                    "type": "boolean"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "description": "Error message",
                    "type": "string"
                  },
                  "success": {
                    "description": "Indicates failure",
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "consumes": [
            "multipart/form-data",
            "application/x-www-form-urlencoded"
          ],
          "tags": [
            "uploads"
          ]
        },
        "parameters": []
      },
      "/users/": {
        "get": {
          "operationId": "users_list",
          "description": "API endpoint for users.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/UserBrief"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "post": {
          "operationId": "users_create",
          "description": "API endpoint for users.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserCreate"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserCreate"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "parameters": []
      },
      "/users/blocks/": {
        "get": {
          "operationId": "users_blocks_list",
          "description": "API endpoint for user blocks.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/UserBlock"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "post": {
          "operationId": "users_blocks_create",
          "description": "API endpoint for user blocks.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserBlock"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserBlock"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "parameters": []
      },
      "/users/blocks/{id}/": {
        "get": {
          "operationId": "users_blocks_read",
          "description": "API endpoint for user blocks.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserBlock"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "put": {
          "operationId": "users_blocks_update",
          "description": "API endpoint for user blocks.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserBlock"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserBlock"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "patch": {
          "operationId": "users_blocks_partial_update",
          "description": "API endpoint for user blocks.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserBlock"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserBlock"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "delete": {
          "operationId": "users_blocks_delete",
          "description": "API endpoint for user blocks.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "users"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/users/disable_2fa/": {
        "post": {
          "operationId": "users_disable_2fa",
          "description": "Disable 2FA for the current user.\nRequires a verification code to confirm identity.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "parameters": []
      },
      "/users/enable_2fa/": {
        "post": {
          "operationId": "users_enable_2fa",
          "description": "Enable 2FA for the current user.\nGenerates a TOTP secret and returns a QR code.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "parameters": []
      },
      "/users/me/": {
        "get": {
          "operationId": "users_me_read",
          "description": "API endpoint for the current authenticated user.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "put": {
          "operationId": "users_me_update",
          "description": "API endpoint for the current authenticated user.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserUpdate"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserUpdate"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "patch": {
          "operationId": "users_me_partial_update",
          "description": "API endpoint for the current authenticated user.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserUpdate"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserUpdate"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "parameters": []
      },
      "/users/password/change/": {
        "post": {
          "operationId": "users_password_change_create",
          "description": "API endpoint for changing user password.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PasswordChange"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/PasswordChange"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "parameters": []
      },
      "/users/roles/": {
        "get": {
          "operationId": "users_roles_list",
          "description": "API endpoint for roles (read-only).",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Role"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "parameters": []
      },
      "/users/roles/{id}/": {
        "get": {
          "operationId": "users_roles_read",
          "description": "API endpoint for roles (read-only).",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Role"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A UUID string identifying this Role.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ]
      },
      "/users/verify_2fa/": {
        "post": {
          "operationId": "users_verify_2fa",
          "description": "Verify the 2FA code and enable 2FA for the user if correct.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "parameters": []
      },
      "/users/{id}/": {
        "get": {
          "operationId": "users_read",
          "description": "API endpoint for users.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "put": {
          "operationId": "users_update",
          "description": "API endpoint for users.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserUpdate"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserUpdate"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "patch": {
          "operationId": "users_partial_update",
          "description": "API endpoint for users.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserUpdate"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/UserUpdate"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "delete": {
          "operationId": "users_delete",
          "description": "API endpoint for users.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "users"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A UUID string identifying this User.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ]
      },
      "/users/{id}/comments/": {
        "get": {
          "operationId": "users_comments",
          "description": "API endpoint for users.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A UUID string identifying this User.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ]
      },
      "/users/{id}/communities/": {
        "get": {
          "operationId": "users_communities",
          "description": "API endpoint for users.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A UUID string identifying this User.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ]
      },
      "/users/{id}/posts/": {
        "get": {
          "operationId": "users_posts",
          "description": "API endpoint for users.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "tags": [
            "users"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A UUID string identifying this User.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ]
      },
      "/votes/": {
        "get": {
          "operationId": "votes_list",
          "description": "API endpoint for votes on posts and comments.",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Number of results to return per page.",
              "required": false,
              "type": "integer"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "The initial index from which to return the results.",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "required": [
                  "count",
                  "results"
                ],
                "type": "object",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "next": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "previous": {
                    "type": "string",
                    "format": "uri",
                    "x-nullable": true
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Vote"
                    }
                  }
                }
              }
            }
          },
          "tags": [
            "votes"
          ]
        },
        "post": {
          "operationId": "votes_create",
          "description": "API endpoint for votes on posts and comments.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          },
          "tags": [
            "votes"
          ]
        },
        "parameters": []
      },
      "/votes/comments/{comment_id}/vote/": {
        "post": {
          "operationId": "votes_comments_vote_create",
          "description": "API endpoint for voting on comments.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          },
          "tags": [
            "votes"
          ]
        },
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/votes/downvote_comment/": {
        "post": {
          "operationId": "votes_downvote_comment",
          "description": "API endpoint for votes on posts and comments.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          },
          "tags": [
            "votes"
          ]
        },
        "parameters": []
      },
      "/votes/downvote_post/": {
        "post": {
          "operationId": "votes_downvote_post",
          "description": "API endpoint for votes on posts and comments.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          },
          "tags": [
            "votes"
          ]
        },
        "parameters": []
      },
      "/votes/posts/{post_id}/vote/": {
        "post": {
          "operationId": "votes_posts_vote_create",
          "description": "API endpoint for voting on posts.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          },
          "tags": [
            "votes"
          ]
        },
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "/votes/upvote_comment/": {
        "post": {
          "operationId": "votes_upvote_comment",
          "description": "API endpoint for votes on posts and comments.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          },
          "tags": [
            "votes"
          ]
        },
        "parameters": []
      },
      "/votes/upvote_post/": {
        "post": {
          "operationId": "votes_upvote_post",
          "description": "API endpoint for votes on posts and comments.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          },
          "tags": [
            "votes"
          ]
        },
        "parameters": []
      },
      "/votes/{id}/": {
        "get": {
          "operationId": "votes_read",
          "description": "API endpoint for votes on posts and comments.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          },
          "tags": [
            "votes"
          ]
        },
        "put": {
          "operationId": "votes_update",
          "description": "API endpoint for votes on posts and comments.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          },
          "tags": [
            "votes"
          ]
        },
        "patch": {
          "operationId": "votes_partial_update",
          "description": "API endpoint for votes on posts and comments.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/Vote"
              }
            }
          },
          "tags": [
            "votes"
          ]
        },
        "delete": {
          "operationId": "votes_delete",
          "description": "API endpoint for votes on posts and comments.",
          "parameters": [],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "tags": [
            "votes"
          ]
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "definitions": {
      "TokenObtainPair": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string",
            "minLength": 1
          },
          "password": {
            "title": "Password",
            "type": "string",
            "minLength": 1
          }
        }
      },
      "TokenRefresh": {
        "required": [
          "refresh"
        ],
        "type": "object",
        "properties": {
          "refresh": {
            "title": "Refresh",
            "type": "string",
            "minLength": 1
          },
          "access": {
            "title": "Access",
            "type": "string",
            "readOnly": true,
            "minLength": 1
          }
        }
      },
      "TokenVerify": {
        "required": [
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "title": "Token",
            "type": "string",
            "minLength": 1
          }
        }
      },
      "User": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "username": {
            "title": "Username",
            "type": "string",
            "maxLength": 150,
            "minLength": 1
          },
          "email": {
            "title": "Email",
            "type": "string",
            "format": "email",
            "readOnly": true,
            "minLength": 1
          },
          "date_joined": {
            "title": "Date joined",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "last_login": {
            "title": "Last login",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "x-nullable": true
          },
          "bio": {
            "title": "Bio",
            "type": "string",
            "x-nullable": true
          },
          "avatar": {
            "title": "Avatar",
            "type": "string",
            "maxLength": 255,
            "x-nullable": true
          },
          "karma": {
            "title": "Karma",
            "type": "integer",
            "readOnly": true
          },
          "is_verified": {
            "title": "Is verified",
            "type": "boolean",
            "readOnly": true
          },
          "is_staff": {
            "title": "Is staff",
            "type": "boolean",
            "readOnly": true
          },
          "two_factor_enabled": {
            "title": "Two factor enabled",
            "type": "boolean"
          }
        }
      },
      "UserCreatePasswordRetype": {
        "required": [
          "username",
          "email",
          "password",
          "re_password"
        ],
        "type": "object",
        "properties": {
          "username": {
            "title": "Username",
            "type": "string",
            "maxLength": 150,
            "minLength": 1
          },
          "email": {
            "title": "Email",
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "minLength": 1
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "password": {
            "title": "Password",
            "type": "string",
            "minLength": 1
          },
          "re_password": {
            "title": "Re password",
            "type": "string",
            "minLength": 1
          }
        }
      },
      "Activation": {
        "required": [
          "uid",
          "token"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "title": "Uid",
            "type": "string",
            "minLength": 1
          },
          "token": {
            "title": "Token",
            "type": "string",
            "minLength": 1
          }
        }
      },
      "SendEmailReset": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string",
            "format": "email",
            "minLength": 1
          }
        }
      },
      "UsernameResetConfirm": {
        "required": [
          "new_email"
        ],
        "type": "object",
        "properties": {
          "new_email": {
            "title": "Email",
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "minLength": 1
          }
        }
      },
      "PasswordResetConfirmRetype": {
        "required": [
          "uid",
          "token",
          "new_password",
          "re_new_password"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "title": "Uid",
            "type": "string",
            "minLength": 1
          },
          "token": {
            "title": "Token",
            "type": "string",
            "minLength": 1
          },
          "new_password": {
            "title": "New password",
            "type": "string",
            "minLength": 1
          },
          "re_new_password": {
            "title": "Re new password",
            "type": "string",
            "minLength": 1
          }
        }
      },
      "SetUsername": {
        "required": [
          "current_password",
          "new_email"
        ],
        "type": "object",
        "properties": {
          "current_password": {
            "title": "Current password",
            "type": "string",
            "minLength": 1
          },
          "new_email": {
            "title": "Email",
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "minLength": 1
          }
        }
      },
      "SetPasswordRetype": {
        "required": [
          "new_password",
          "re_new_password",
          "current_password"
        ],
        "type": "object",
        "properties": {
          "new_password": {
            "title": "New password",
            "type": "string",
            "minLength": 1
          },
          "re_new_password": {
            "title": "Re new password",
            "type": "string",
            "minLength": 1
          },
          "current_password": {
            "title": "Current password",
            "type": "string",
            "minLength": 1
          }
        }
      },
      "UserBrief": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "username": {
            "title": "Username",
            "type": "string",
            "readOnly": true,
            "minLength": 1
          },
          "avatar": {
            "title": "Avatar",
            "type": "string",
            "readOnly": true,
            "minLength": 1,
            "x-nullable": true
          },
          "karma": {
            "title": "Karma",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "Comment": {
        "required": [
          "post",
          "content"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "post": {
            "title": "Post",
            "type": "string",
            "format": "uuid"
          },
          "user": {
            "$ref": "#/definitions/UserBrief"
          },
          "parent": {
            "title": "Parent",
            "type": "string",
            "format": "uuid",
            "x-nullable": true
          },
          "content": {
            "title": "Content",
            "type": "string",
            "minLength": 1
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "title": "Updated at",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "x-nullable": true
          },
          "is_edited": {
            "title": "Is edited",
            "type": "boolean",
            "readOnly": true
          },
          "is_deleted": {
            "title": "Is deleted",
            "type": "boolean",
            "readOnly": true
          },
          "upvote_count": {
            "title": "Upvote count",
            "type": "integer",
            "readOnly": true
          },
          "downvote_count": {
            "title": "Downvote count",
            "type": "integer",
            "readOnly": true
          },
          "score": {
            "title": "Score",
            "type": "integer",
            "readOnly": true
          },
          "path": {
            "title": "Path",
            "type": "string",
            "readOnly": true,
            "minLength": 1
          },
          "depth": {
            "title": "Depth",
            "type": "integer",
            "readOnly": true
          },
          "reply_count": {
            "title": "Reply count",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "Community": {
        "required": [
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          },
          "description": {
            "title": "Description",
            "type": "string",
            "minLength": 1
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "title": "Created by",
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "x-nullable": true
          },
          "sidebar_content": {
            "title": "Sidebar content",
            "type": "string",
            "x-nullable": true
          },
          "banner_image": {
            "title": "Banner image",
            "type": "string",
            "maxLength": 255,
            "x-nullable": true
          },
          "icon_image": {
            "title": "Icon image",
            "type": "string",
            "maxLength": 255,
            "x-nullable": true
          },
          "is_private": {
            "title": "Is private",
            "type": "boolean"
          },
          "member_count": {
            "title": "Member count",
            "type": "integer",
            "readOnly": true
          },
          "is_nsfw": {
            "title": "Is nsfw",
            "type": "boolean"
          }
        }
      },
      "Flair": {
        "required": [
          "community",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "community": {
            "title": "Community",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          },
          "background_color": {
            "title": "Background color",
            "type": "string",
            "maxLength": 7,
            "minLength": 1
          },
          "text_color": {
            "title": "Text color",
            "type": "string",
            "maxLength": 7,
            "minLength": 1
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "title": "Created by",
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "x-nullable": true
          },
          "is_mod_only": {
            "title": "Is mod only",
            "type": "boolean"
          }
        }
      },
      "CommunityRule": {
        "required": [
          "community",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "community": {
            "title": "Community",
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          },
          "description": {
            "title": "Description",
            "type": "string",
            "x-nullable": true
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "title": "Created by",
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "x-nullable": true
          },
          "order": {
            "title": "Order",
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          }
        }
      },
      "CommunityMember": {
        "required": [
          "community",
          "user"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "community": {
            "title": "Community",
            "type": "string",
            "format": "uuid"
          },
          "user": {
            "title": "User",
            "type": "string",
            "format": "uuid"
          },
          "user_details": {
            "$ref": "#/definitions/User"
          },
          "joined_at": {
            "title": "Joined at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "is_banned": {
            "title": "Is banned",
            "type": "boolean"
          },
          "ban_reason": {
            "title": "Ban reason",
            "type": "string",
            "x-nullable": true
          },
          "banned_until": {
            "title": "Banned until",
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          "banned_by": {
            "title": "Banned by",
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "x-nullable": true
          }
        }
      },
      "CommunityModerator": {
        "required": [
          "community",
          "user"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "community": {
            "title": "Community",
            "type": "string",
            "format": "uuid"
          },
          "user": {
            "title": "User",
            "type": "string",
            "format": "uuid"
          },
          "user_details": {
            "$ref": "#/definitions/User"
          },
          "appointed_at": {
            "title": "Appointed at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "appointed_by": {
            "title": "Appointed by",
            "type": "string",
            "format": "uuid",
            "x-nullable": true
          },
          "permissions": {
            "title": "Permissions",
            "type": "object"
          }
        }
      },
      "PrivateMessage": {
        "required": [
          "recipient_id",
          "subject",
          "content"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "sender": {
            "$ref": "#/definitions/UserBrief"
          },
          "recipient": {
            "$ref": "#/definitions/UserBrief"
          },
          "recipient_id": {
            "title": "Recipient id",
            "type": "string",
            "format": "uuid"
          },
          "subject": {
            "title": "Subject",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "content": {
            "title": "Content",
            "type": "string",
            "minLength": 1
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "is_read": {
            "title": "Is read",
            "type": "boolean",
            "readOnly": true
          },
          "read_at": {
            "title": "Read at",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "x-nullable": true
          }
        }
      },
      "BanAppeal": {
        "required": [
          "appeal_type",
          "reason"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "user": {
            "$ref": "#/definitions/UserBrief"
          },
          "appeal_type": {
            "title": "Appeal type",
            "type": "string",
            "enum": [
              "community_ban",
              "site_ban"
            ]
          },
          "community": {
            "$ref": "#/definitions/Community"
          },
          "reason": {
            "title": "Reason",
            "type": "string",
            "minLength": 1
          },
          "evidence": {
            "title": "Evidence",
            "type": "string",
            "x-nullable": true
          },
          "status": {
            "title": "Status",
            "type": "string",
            "enum": [
              "pending",
              "approved",
              "rejected"
            ],
            "readOnly": true
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "reviewed_at": {
            "title": "Reviewed at",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "x-nullable": true
          },
          "reviewed_by": {
            "$ref": "#/definitions/UserBrief"
          },
          "reviewer_notes": {
            "title": "Reviewer notes",
            "type": "string",
            "readOnly": true,
            "minLength": 1,
            "x-nullable": true
          },
          "response_to_user": {
            "title": "Response to user",
            "type": "string",
            "readOnly": true,
            "minLength": 1,
            "x-nullable": true
          },
          "original_ban_reason": {
            "title": "Original ban reason",
            "type": "string",
            "x-nullable": true
          },
          "original_banned_until": {
            "title": "Original banned until",
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          }
        }
      },
      "Report": {
        "required": [
          "content_type",
          "content_id",
          "reason"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "reporter": {
            "$ref": "#/definitions/UserBrief"
          },
          "community": {
            "$ref": "#/definitions/Community"
          },
          "content_type": {
            "title": "Content type",
            "type": "string",
            "enum": [
              "post",
              "comment",
              "user"
            ]
          },
          "content_id": {
            "title": "Content id",
            "type": "string",
            "format": "uuid"
          },
          "reason": {
            "title": "Reason",
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          },
          "details": {
            "title": "Details",
            "type": "string",
            "x-nullable": true
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "status": {
            "title": "Status",
            "type": "string",
            "enum": [
              "pending",
              "resolved",
              "rejected"
            ],
            "readOnly": true
          },
          "resolved_by": {
            "$ref": "#/definitions/UserBrief"
          },
          "resolved_at": {
            "title": "Resolved at",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "x-nullable": true
          },
          "resolution_notes": {
            "title": "Resolution notes",
            "type": "string",
            "readOnly": true,
            "minLength": 1,
            "x-nullable": true
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "user": {
            "title": "User",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "sender": {
            "$ref": "#/definitions/UserBrief"
          },
          "notification_type": {
            "title": "Notification type",
            "type": "string",
            "enum": [
              "comment_reply",
              "post_reply",
              "mention",
              "mod_action",
              "vote_milestone",
              "welcome"
            ],
            "readOnly": true
          },
          "content_type": {
            "title": "Content type",
            "type": "string",
            "enum": [
              "post",
              "comment",
              "message",
              "community",
              "user"
            ],
            "readOnly": true
          },
          "content_id": {
            "title": "Content id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "message": {
            "title": "Message",
            "type": "string",
            "readOnly": true,
            "minLength": 1
          },
          "is_read": {
            "title": "Is read",
            "type": "boolean"
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "link_url": {
            "title": "Link url",
            "type": "string",
            "readOnly": true,
            "minLength": 1,
            "x-nullable": true
          }
        }
      },
      "NotificationCount": {
        "type": "object",
        "properties": {
          "unread_count": {
            "title": "Unread count",
            "type": "integer",
            "readOnly": true
          },
          "total_count": {
            "title": "Total count",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "PostMedia": {
        "required": [
          "post",
          "media_type",
          "media_url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "post": {
            "title": "Post",
            "type": "string",
            "format": "uuid"
          },
          "media_type": {
            "title": "Media type",
            "type": "string",
            "maxLength": 50,
            "minLength": 1
          },
          "media_url": {
            "title": "Media url",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "thumbnail_url": {
            "title": "Thumbnail url",
            "type": "string",
            "maxLength": 255,
            "x-nullable": true
          },
          "order": {
            "title": "Order",
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "Post": {
        "required": [
          "community_id",
          "title",
          "content"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "user": {
            "$ref": "#/definitions/UserBrief"
          },
          "community": {
            "$ref": "#/definitions/Community"
          },
          "community_id": {
            "title": "Community id",
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "maxLength": 300,
            "minLength": 1
          },
          "content": {
            "title": "Content",
            "type": "string",
            "minLength": 1
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "title": "Updated at",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "x-nullable": true
          },
          "is_edited": {
            "title": "Is edited",
            "type": "boolean",
            "readOnly": true
          },
          "is_deleted": {
            "title": "Is deleted",
            "type": "boolean",
            "readOnly": true
          },
          "is_locked": {
            "title": "Is locked",
            "type": "boolean",
            "readOnly": true
          },
          "locked_reason": {
            "title": "Locked reason",
            "type": "string",
            "readOnly": true,
            "minLength": 1,
            "x-nullable": true
          },
          "is_pinned": {
            "title": "Is pinned",
            "type": "boolean",
            "readOnly": true
          },
          "flair": {
            "$ref": "#/definitions/Flair"
          },
          "flair_id": {
            "title": "Flair id",
            "type": "string",
            "format": "uuid",
            "x-nullable": true
          },
          "upvote_count": {
            "title": "Upvote count",
            "type": "integer",
            "readOnly": true
          },
          "downvote_count": {
            "title": "Downvote count",
            "type": "integer",
            "readOnly": true
          },
          "comment_count": {
            "title": "Comment count",
            "type": "integer",
            "readOnly": true
          },
          "view_count": {
            "title": "View count",
            "type": "integer",
            "readOnly": true
          },
          "is_nsfw": {
            "title": "Is nsfw",
            "type": "boolean"
          },
          "is_spoiler": {
            "title": "Is spoiler",
            "type": "boolean"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PostMedia"
            },
            "readOnly": true
          },
          "score": {
            "title": "Score",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "SearchResult": {
        "type": "object",
        "properties": {
          "posts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Post"
            },
            "readOnly": true
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Comment"
            },
            "readOnly": true
          },
          "communities": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Community"
            },
            "readOnly": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserBrief"
            },
            "readOnly": true
          },
          "total_results": {
            "title": "Total results",
            "type": "integer",
            "readOnly": true
          },
          "query": {
            "title": "Query",
            "type": "string",
            "readOnly": true,
            "minLength": 1
          }
        }
      },
      "SearchHistory": {
        "required": [
          "query"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "user": {
            "$ref": "#/definitions/UserBrief"
          },
          "query": {
            "title": "Query",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "result_count": {
            "title": "Result count",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "UserCreate": {
        "required": [
          "username",
          "email",
          "password",
          "password_confirmation",
          "captcha"
        ],
        "type": "object",
        "properties": {
          "username": {
            "title": "Username",
            "type": "string",
            "maxLength": 150,
            "minLength": 1
          },
          "email": {
            "title": "Email",
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "minLength": 1
          },
          "password": {
            "title": "Password",
            "type": "string",
            "minLength": 1
          },
          "password_confirmation": {
            "title": "Password confirmation",
            "type": "string",
            "minLength": 1
          },
          "bio": {
            "title": "Bio",
            "type": "string",
            "x-nullable": true
          },
          "avatar": {
            "title": "Avatar",
            "type": "string",
            "maxLength": 255,
            "x-nullable": true
          },
          "captcha": {
            "title": "Captcha",
            "type": "string",
            "minLength": 1
          }
        }
      },
      "UserBlock": {
        "required": [
          "blocked_user_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "user": {
            "title": "User",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "blocked_user": {
            "$ref": "#/definitions/UserBrief"
          },
          "blocked_user_id": {
            "title": "Blocked user id",
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "reason": {
            "title": "Reason",
            "type": "string",
            "x-nullable": true
          }
        }
      },
      "UserUpdate": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "title": "Username",
            "type": "string",
            "maxLength": 150,
            "minLength": 1
          },
          "bio": {
            "title": "Bio",
            "type": "string",
            "x-nullable": true
          },
          "avatar": {
            "title": "Avatar",
            "type": "string",
            "maxLength": 255,
            "x-nullable": true
          },
          "two_factor_enabled": {
            "title": "Two factor enabled",
            "type": "boolean"
          }
        }
      },
      "PasswordChange": {
        "required": [
          "current_password",
          "new_password",
          "confirm_password"
        ],
        "type": "object",
        "properties": {
          "current_password": {
            "title": "Current password",
            "type": "string",
            "minLength": 1
          },
          "new_password": {
            "title": "New password",
            "type": "string",
            "minLength": 1
          },
          "confirm_password": {
            "title": "Confirm password",
            "type": "string",
            "minLength": 1
          }
        }
      },
      "Role": {
        "required": [
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "title": "Name",
            "type": "string",
            "maxLength": 50,
            "minLength": 1
          },
          "description": {
            "title": "Description",
            "type": "string",
            "minLength": 1
          }
        }
      },
      "Vote": {
        "required": [
          "content_type",
          "content_id",
          "vote_type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "user_id": {
            "title": "User id",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "username": {
            "title": "Username",
            "type": "string",
            "readOnly": true,
            "minLength": 1
          },
          "content_type": {
            "title": "Content type",
            "type": "string",
            "enum": [
              "post",
              "comment"
            ]
          },
          "content_id": {
            "title": "Content id",
            "type": "string",
            "format": "uuid"
          },
          "vote_type": {
            "title": "Vote type",
            "type": "integer",
            "enum": [-1, 1]
          },
          "created_at": {
            "title": "Created at",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "title": "Updated at",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "x-nullable": true
          }
        }
      }
    }
  }